# helper functions for reading in spectrum files
from astropy.io import fits
import numpy as np
import os



def spec_base_filename(orientation, model, time, r): 
    return 'COS-FUV_%s_%s_%.1fGyr_r%ikpc'%(orientation, model, time, r)


def load_velocity_data(ion, orientation, model, time, radius,\
                       work_dir = '../../data/analyzed_spectra' ):
    # TEMP
    if time == 11.2:
        redshift = 0.2
    else:
        redshift = 0
        print("ARE YOU SURE YOU WANT REDSHIFT = 0?")

    w0 = restwave(ion, redshift)

    base = spec_base_filename(orientation, model, time, radius)
    wl, flux, ferr = load_spec_from_fits('%s/%s/%s_ibnorm.fits'%(work_dir,base, base))
    vv = (wl-w0) / w0 * 2.9979e5
    
    fit = '%s/%s/FitInspection.fits'%(work_dir,base)
    if os.path.isfile(fit):
        wlfit, fluxfit, ferrfit = load_spec_from_fits(fit)
        vvfit = (wlfit-w0) / w0 * 2.9979e5
    else:
        print("ERROR NO VPMODEL FITS FILE")
        wlfit = wl
        fluxfit = flux
        vvfit = vv
    
    return vv, flux, vvfit, fluxfit, wl, wlfit, w0

def load_spec_from_fits(fn):
    spec = fits.open(fn)
    wl = spec['WAVELENGTH'].data
    flux = spec['FLUX'].data
    err = spec['ERROR'].data
    spec.close()
    return wl, flux, err

def all_restwaves(ion, z = 0, infile = 'restwaves_to_use.dat'):
    ion = ion.replace(" ", "")
    ion_names = np.loadtxt(infile, unpack = True, usecols = 0, dtype = 'str')
    restwaves = np.loadtxt(infile, unpack = True, usecols = 1)

    mask = ion_names == ion
    return restwaves[mask]

def restwave(ion, z = 0):
    # note: these were generated by hand
    # using the rest wavelengths generated by 
    # the veeper VPmodel fit
    ion = ion.replace(" ", "")
    if ion == 'HI':
        restwave = 1215.67
    elif ion == 'CII':
        restwave = 1334.5323
    elif ion == 'CIII':
        restwave = 977.020
    elif ion == 'CIV':
        restwave = 1548.204
    elif ion == 'NV':
        restwave = 1238.821
    elif ion == 'NIII':
        restwave = 989.799
    elif ion == 'SiII':
        restwave = 1190.4158
    elif ion == 'SiIII':
        restwave = 1206.5
    elif ion == 'SiIV':
        restwave = 1402.7729
    elif ion == 'MgII':
        restwave = 1239.9253
    elif ion == 'OVI':
        restwave = 1031.9261
    else:
        print("%s not recognized as ion"%(ion))
    obs_wavelength = (z+1)*restwave
    return obs_wavelength

def ion_from_restwave(rw):
    if restwave == 1215.67:
        ion  = 'H I'
    elif restwave == 1334.5323:
        ion = 'CII'
    elif restwave == 1548.204:
        ion = 'CIV'
    elif restwave == 1238.821:
        ion = 'NV'
    elif restwave == 1190.4158:
        ion = 'SiII'
    elif restwave == 1206.5:
        ion = 'SiIII'
    elif restwave == 1402.7729:
        ion = 'SiIV'
    else:
        print("%s not a recognized restwave"%(rw))
    return ion
