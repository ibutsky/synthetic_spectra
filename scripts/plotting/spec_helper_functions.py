# helper functions for reading in spectrum files
from astropy.io import fits
import numpy as np
import os

def orientation_folder(orientation):
    if orientation == 'face':
        return 'FACE-ON'
    elif orientation == 'edge_theta0':
        return 'EDGE-THETA0.0'
    elif orientation == 'edge_theta1.0':
        return 'EDGE-THETA1.0'
    elif orientation == 'edge_theta1.5':
        return 'EDGE-THETA1.5'
    else:
        print("ERROR: Unrecognized orientation")

def model_folder(model):
    if model == 'stream':
        return 'STREAM'
    elif model == 'anisd':
        return 'ANISD'
    else:
        print("ERROR: Unrecognized model")

def spec_folder(orientation, model):
    return '../%s/%s/'%(orientation_folder(orientation), model_folder(model))

def spec_base_filename(orientation, model, r): 
    dir = spec_folder(orientation, model)
    fn = 'COS-FUV_%s_%s_13.0Gyr_r%ikpc'%(orientation, model, r)
    return dir+fn

def load_spec_from_fits(fn):
    spec = fits.open(fn)
    wl = spec['WAVELENGTH'].data
    flux = spec['FLUX'].data
    err = spec['ERROR'].data
    spec.close()
    return wl, flux, err

def all_restwaves(ion, z = 0, infile = 'restwaves_to_use.dat'):
    ion = ion.replace(" ", "")
    ion_names = np.loadtxt(infile, unpack = True, usecols = 0, dtype = 'str')
    restwaves = np.loadtxt(infile, unpack = True, usecols = 1)

    mask = ion_names == ion
    return restwaves[mask]

def restwave(ion, z = 0):
    # note: these were generated by hand
    # using the rest wavelengths generated by 
    # the veeper VPmodel fit
    ion = ion.replace(" ", "")
    if ion == 'HI':
        restwave = 1215.67
    elif ion == 'CII':
        restwave = 1334.5323
    elif ion == 'CIII':
        restwave = 977.020
    elif ion == 'CIV':
        restwave = 1548.204
    elif ion == 'NV':
        restwave = 1238.821
    elif ion == 'NIII':
        restwave = 989.799
    elif ion == 'SiII':
        restwave = 1190.4158
    elif ion == 'SiIII':
        restwave = 1206.5
    elif ion == 'SiIV':
        restwave = 1402.7729
    elif ion == 'MgII':
        restwave = 1239.9253
    elif ion == 'OVI':
        restwave = 1031.9261
    else:
        print("%s not recognized as ion"%(ion))
    obs_wavelength = (z+1)*restwave
    return obs_wavelength

def ion_from_restwave(rw):
    if restwave == 1215.67:
        ion  = 'H I'
    elif restwave == 1334.5323:
        ion = 'CII'
    elif restwave == 1548.204:
        ion = 'CIV'
    elif restwave == 1238.821:
        ion = 'NV'
    elif restwave == 1190.4158:
        ion = 'SiII'
    elif restwave == 1206.5:
        ion = 'SiIII'
    elif restwave == 1402.7729:
        ion = 'SiIV'
    else:
        print("%s not a recognized restwave"%(rw))
    return ion
